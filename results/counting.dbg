
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[N] -> { S_0[c0, c1, c2] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N }", child: { schedule: "[N] -> L_0[{ S_0[c0, c1, c2] -> [(c0)]; S_1[c0, c1, c2] -> [(c0)] }]", child: { schedule: "[N] -> L_1[{ S_0[c0, c1, c2] -> [(c1)]; S_1[c0, c1, c2] -> [(c1)] }]", child: { schedule: "[N] -> L_2[{ S_0[c0, c1, c2] -> [(c2)]; S_1[c0, c1, c2] -> [(c2)] }]", child: { sequence: [ { filter: "[N] -> { S_0[c0, c1, c2] }" }, { filter: "[N] -> { S_1[c0, c1, c2] }" } ] } } } } }

#domain:
[N] -> { S_0[c0, c1, c2] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N }

#schedule map:
[N] -> { S_0[c0, c1, c2] -> [c0, c1, c2, 0]; S_1[c0, c1, c2] -> [c0, c1, c2, 1] }

#isl schedule:
{ domain: "[N] -> { S_0[c0, c1, c2] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N }", child: { schedule: "[N] -> [{ S_0[c0, c1, c2] -> [(c0)]; S_1[c0, c1, c2] -> [(c0)] }, { S_0[c0, c1, c2] -> [(c1)]; S_1[c0, c1, c2] -> [(c1)] }, { S_0[c0, c1, c2] -> [(c0 + c2)]; S_1[c0, c1, c2] -> [(c0 + c2)] }]", permutable: 1, coincident: [ 1, 1, 1 ], child: { sequence: [ { filter: "[N] -> { S_0[c0, c1, c2] }" }, { filter: "[N] -> { S_1[c0, c1, c2] }" } ] } } }

#isl schedule map:
[N] -> { S_0[c0, c1, c2] -> [c0, c1, c0 + c2, 0]; S_1[c0, c1, c2] -> [c0, c1, c0 + c2, 1] }

#writes:
[N] -> { S_1[c0, c1, c2] -> c[-c1, c2] : c0 > 0 and c1 < 0 and c2 > c0 - c1 and 0 <= c2 <= 1 + 2c0 - c1 and c2 <= N; S_0[c0, c1, c2] -> c[-c1, c2] : c1 < 0 and c2 > c0 - c1 and 0 <= c2 <= 2c0 - c1 and c2 <= N }

#reads:
[N] -> { S_1[c0, c1, c2] -> c[-c1, c2] : c0 > 0 and c1 < 0 and c2 > c0 - c1 and 0 <= c2 <= 1 + 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] -> c[-c1, -1 + c0 - c1] : c0 > 0 and c1 < 0 and c1 < c0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] -> c[1 + c0 - c1, -1 + c2] : c0 > 0 and c1 < 0 and c1 <= 1 + c0 and c2 > c0 - c1 and 0 < c2 <= 1 + 2c0 - c1 and c2 <= N; S_1[c0, c1, c2] -> c[-c1, -1 + c2] : c0 > 0 and c1 < 0 and c2 > c0 - c1 and 0 < c2 <= 1 + 2c0 - c1 and c2 <= N; S_0[c0, c1, c2] -> c[-c1, c2] : c1 < 0 and c2 > c0 - c1 and 0 <= c2 <= 2c0 - c1 and c2 <= N; S_0[c0, c1, c2] -> c[-c1, -1 + c2] : c1 < 0 and c2 > c0 - c1 and 0 < c2 <= 2c0 - c1 and c2 <= N; S_0[c0, c1, c2] -> c[-c0 + c2, -1 + c2] : c1 < 0 and c2 >= c0 and c2 > c0 - c1 and 0 < c2 <= 2c0 - c1 and c2 <= N; S_0[c0, c1, c2] -> c[-c1, -2 - c0 + c2] : c1 < 0 and c2 >= 2 + c0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N }

#dep_raw:
[N] -> { S_1[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c0' >= -c0 + c1 + c2 and c2' > c0 + c2 - c0' and c2' >= c2 and -c1 + c0' < c2' <= 1 + c2 and c2' <= N; S_1[c0, c1, c2] -> S_1[c0', c1' = 1 + c1 + c0', c2' = 1 + c2] : c0 > 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 < N and c1 + c2 < c0' <= -2 - c1; S_1[c0, c1, c2] -> S_1[c0' = 1 + c1 + c2, c1' = c1, c2'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and 2 + c2 <= c2' <= 3 + c1 + 2c2 and c2' <= N; S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and 2c0' > c1 + c2 and c2' > c0 + c2 - c0' and c2' >= c2 and -c1 + c0' < c2' <= 1 + c2 and c2' <= N; S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = 2 + c2 + c0'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and 2 + c1 + c2 <= c0' <= -2 + N - c2; S_1[c0, c1, c2] -> S_0[c0' = 1 + c1 + c2, c1', c2' = 1 + c2] : c0 > 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 < N and c1 < c1' < 0 and c1' <= 1 + 2c1 + c2; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c0' > -c0 + c1 + c2 and c2' > c0 + c2 - c0' and c2' >= c2 and -c1 + c0' < c2' <= 1 + c2 and c2' <= N; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = 2 + c2 + c0'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and 2 + c1 + c2 <= c0' <= -2 + N - c2; S_0[c0, c1, c2] -> S_0[c0' = 1 + c1 + c2, c1', c2' = 1 + c2] : c0 - c1 < c2 <= 2c0 - c1 and c2 < N and c1 < c1' < 0 and c1' <= 1 + 2c1 + c2; S_0[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c0' >= c0 and c2' >= c2 and -c1 + c0' < c2' <= 1 + c2 and c2' <= N; S_0[c0, c1, c2] -> S_1[c0', c1' = 1 + c1 + c0', c2' = 1 + c2] : c0 - c1 < c2 <= 2c0 - c1 and c2 < N and c1 + c2 < c0' <= -2 - c1; S_0[c0, c1, c2] -> S_1[c0' = 1 + c1 + c2, c1' = c1, c2'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and 2 + c2 <= c2' <= 3 + c1 + 2c2 and c2' <= N }

#dep_waw:
[N] -> { S_1[c0, c1, c2] -> S_1[c0', c1' = c1, c2' = c2] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2 <= N and c0 < c0' < c1 + c2; S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = c2] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2 <= N and c0 < c0' < c1 + c2; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = c2] : c1 < 0 and c2 <= 2c0 - c1 and c2 <= N and c0 < c0' < c1 + c2; S_0[c0, c1, c2] -> S_1[c0', c1' = c1, c2' = c2] : c1 < 0 and c2 <= 2c0 - c1 and c2 <= N and c0 <= c0' < c1 + c2 }

#dep_war:
[N] -> { S_1[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2 <= N and c0' > c0 and c2' >= -1 + c2 and -c1 + c0' < c2' <= c2; S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2 <= N and c0' > c0 and c2' >= -1 + c2 and -c1 + c0' < c2' <= c2; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 2c0 - c1 and c2 <= N and c0' > c0 and c2' >= -1 + c2 and -c1 + c0' < c2' <= c2; S_0[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 2c0 - c1 and c2 <= N and c2' >= c0 + c2 - c0' and c2' >= -1 + c2 and -c1 + c0' < c2' <= c2 }

#relations:
[N] -> { S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2' >= -1 + c2 and -c1 + c0' < c2' <= 1 + c2 and ((c2 <= N and c0' > c0 and c2' <= c2) or (c0 > 0 and c2 > c0 - c1 and 2c0' > c1 + c2 and c2' > c0 + c2 - c0' and c2 <= c2' <= N)); S_1[c0, c1, c2] -> S_0[c0' = 1 + c1 + c2, c1', c2' = 1 + c2] : c0 > 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 < N and c1 < c1' < 0 and c1' <= 1 + 2c1 + c2; S_1[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = 2 + c2 + c0'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and 2 + c1 + c2 <= c0' <= -2 + N - c2; S_1[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 1 + 2c0 - c1 and c2' >= -1 + c2 and -c1 + c0' < c2' <= 1 + c2 and ((c2 <= N and c0' > c0 and c2' <= c2) or (c0 > 0 and c2 > c0 - c1 and c0' >= -c0 + c1 + c2 and c2' > c0 + c2 - c0' and c2 <= c2' <= N)); S_1[c0, c1, c2] -> S_1[c0' = 1 + c1 + c2, c1' = c1, c2'] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and 2 + c2 <= c2' <= 3 + c1 + 2c2 and c2' <= N; S_1[c0, c1, c2] -> S_1[c0', c1' = 1 + c1 + c0', c2' = 1 + c2] : c0 > 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 < N and c1 + c2 < c0' <= -2 - c1; S_0[c0, c1, c2] -> S_1[c0', c1' = c1, c2'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N and c0' >= c0 and c2' >= c0 + c2 - c0' and c2' >= -1 + c2 and -c1 + c0' < c2' <= 1 + c2 and c2' <= N; S_0[c0, c1, c2] -> S_1[c0', c1' = 1 + c1 + c0', c2' = 1 + c2] : c0 - c1 < c2 <= 2c0 - c1 and c2 < N and c1 + c2 < c0' <= -2 - c1; S_0[c0, c1, c2] -> S_1[c0' = 1 + c1 + c2, c1' = c1, c2'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and 2 + c2 <= c2' <= 3 + c1 + 2c2 and c2' <= N; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2'] : c1 < 0 and c2 <= 2c0 - c1 and c2' >= -1 + c2 and -c1 + c0' < c2' <= 1 + c2 and ((c2 <= N and c0' > c0 and c2' <= c2) or (c2 > c0 - c1 and c0' > -c0 + c1 + c2 and c2' > c0 + c2 - c0' and c2 <= c2' <= N)); S_0[c0, c1, c2] -> S_0[c0' = 1 + c1 + c2, c1', c2' = 1 + c2] : c0 - c1 < c2 <= 2c0 - c1 and c2 < N and c1 < c1' < 0 and c1' <= 1 + 2c1 + c2; S_0[c0, c1, c2] -> S_0[c0', c1' = c1, c2' = 2 + c2 + c0'] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and 2 + c1 + c2 <= c0' <= -2 + N - c2 }

#delta:
{ [c0, c1, c2 = 1] : c0 >= 2 and c1 > 0; [c0, c1 = 0, c2] : c0 >= 0 and c2 >= -1 and ((-c0 <= c2 <= 1) or (c0 >= 2 and c2 >= 2)) }

#######################################################################

#######################################################################

#norm schedule map:
[N] -> { S_1[c0, c1, c2] -> [c0, c1, c2, 1]; S_0[c0, c1, c2] -> [c0, c1, c2, 0] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[N] -> { S_1[c0, c1, c2] -> S_1[i0 = c0, i1 = c1, i2 = c2, i3 = 1]; S_0[c0, c1, c2] -> S_0[i0 = c0, i1 = c1, i2 = c2, i3 = 0] }

#domain:
[N] -> { S_1[i0, i1, i2, i3 = 1] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 <= N; S_0[i0, i1, i2, i3 = 0] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and i2 <= N }

#schedule map:
[N] -> { S_1[i0, i1, i2, i3 = 1] -> [i0, i1, i2, 1]; S_0[i0, i1, i2, i3 = 0] -> [i0, i1, i2, 0] }

#writes:
[N] -> { S_0[i0, i1, i2, i3 = 0] -> c[-i1, i2] : i1 < 0 and i2 > i0 - i1 and 0 <= i2 <= 2i0 - i1 and i2 <= N; S_1[i0, i1, i2, i3 = 1] -> c[-i1, i2] : i0 > 0 and i1 < 0 and i2 > i0 - i1 and 0 <= i2 <= 1 + 2i0 - i1 and i2 <= N }

#reads:
[N] -> { S_0[i0, i1, i2, i3 = 0] -> c[-i1, i2] : i1 < 0 and i2 > i0 - i1 and 0 <= i2 <= 2i0 - i1 and i2 <= N; S_0[i0, i1, i2, i3 = 0] -> c[-i1, -1 + i2] : i1 < 0 and i2 > i0 - i1 and 0 < i2 <= 2i0 - i1 and i2 <= N; S_0[i0, i1, i2, i3 = 0] -> c[-i0 + i2, -1 + i2] : i1 < 0 and i2 >= i0 and i2 > i0 - i1 and 0 < i2 <= 2i0 - i1 and i2 <= N; S_0[i0, i1, i2, i3 = 0] -> c[-i1, -2 - i0 + i2] : i1 < 0 and i2 >= 2 + i0 and i0 - i1 < i2 <= 2i0 - i1 and i2 <= N; S_1[i0, i1, i2, i3 = 1] -> c[-i1, i2] : i0 > 0 and i1 < 0 and i2 > i0 - i1 and 0 <= i2 <= 1 + 2i0 - i1 and i2 <= N; S_1[i0, i1, i2, i3 = 1] -> c[-i1, -1 + i0 - i1] : i0 > 0 and i1 < 0 and i1 < i0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 <= N; S_1[i0, i1, i2, i3 = 1] -> c[1 + i0 - i1, -1 + i2] : i0 > 0 and i1 < 0 and i1 <= 1 + i0 and i2 > i0 - i1 and 0 < i2 <= 1 + 2i0 - i1 and i2 <= N; S_1[i0, i1, i2, i3 = 1] -> c[-i1, -1 + i2] : i0 > 0 and i1 < 0 and i2 > i0 - i1 and 0 < i2 <= 1 + 2i0 - i1 and i2 <= N }

#dep_raw:
[N] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2', i3' = 0] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and i0' > -i0 + i1 + i2 and i2' > i0 + i2 - i0' and i2' >= i2 and -i1 + i0' < i2' <= 1 + i2 and i2' <= N; S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = 2 + i2 + i0', i3' = 0] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and 2 + i1 + i2 <= i0' <= -2 + N - i2; S_0[i0, i1, i2, i3 = 0] -> S_0[i0' = 1 + i1 + i2, i1', i2' = 1 + i2, i3' = 0] : i0 - i1 < i2 <= 2i0 - i1 and i2 < N and i1 < i1' < 0 and i1' <= 1 + 2i1 + i2; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2', i3' = 0] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and 2i0' > i1 + i2 and i2' > i0 + i2 - i0' and i2' >= i2 and -i1 + i0' < i2' <= 1 + i2 and i2' <= N; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2' = 2 + i2 + i0', i3' = 0] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and 2 + i1 + i2 <= i0' <= -2 + N - i2; S_1[i0, i1, i2, i3 = 1] -> S_0[i0' = 1 + i1 + i2, i1', i2' = 1 + i2, i3' = 0] : i0 > 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 < N and i1 < i1' < 0 and i1' <= 1 + 2i1 + i2; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2', i3' = 1] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and i0' >= i0 and i2' >= i2 and -i1 + i0' < i2' <= 1 + i2 and i2' <= N; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = 1 + i1 + i0', i2' = 1 + i2, i3' = 1] : i0 - i1 < i2 <= 2i0 - i1 and i2 < N and i1 + i2 < i0' <= -2 - i1; S_0[i0, i1, i2, i3 = 0] -> S_1[i0' = 1 + i1 + i2, i1' = i1, i2', i3' = 1] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and 2 + i2 <= i2' <= 3 + i1 + 2i2 and i2' <= N; S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2', i3' = 1] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i0' >= -i0 + i1 + i2 and i2' > i0 + i2 - i0' and i2' >= i2 and -i1 + i0' < i2' <= 1 + i2 and i2' <= N; S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = 1 + i1 + i0', i2' = 1 + i2, i3' = 1] : i0 > 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 < N and i1 + i2 < i0' <= -2 - i1; S_1[i0, i1, i2, i3 = 1] -> S_1[i0' = 1 + i1 + i2, i1' = i1, i2', i3' = 1] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and 2 + i2 <= i2' <= 3 + i1 + 2i2 and i2' <= N }

#dep_waw:
[N] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = i2, i3' = 0] : i1 < 0 and i2 <= 2i0 - i1 and i2 <= N and i0 < i0' < i1 + i2; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2' = i2, i3' = 0] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2 <= N and i0 < i0' < i1 + i2; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : i1 < 0 and i2 <= 2i0 - i1 and i2 <= N and i0 <= i0' < i1 + i2; S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2 <= N and i0 < i0' < i1 + i2 }

#dep_war:
[N] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2', i3' = 0] : i1 < 0 and i2 <= 2i0 - i1 and i2 <= N and i0' > i0 and i2' >= -1 + i2 and -i1 + i0' < i2' <= i2; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2', i3' = 0] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2 <= N and i0' > i0 and i2' >= -1 + i2 and -i1 + i0' < i2' <= i2; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2', i3' = 1] : i1 < 0 and i2 <= 2i0 - i1 and i2 <= N and i2' >= i0 + i2 - i0' and i2' >= -1 + i2 and -i1 + i0' < i2' <= i2; S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2', i3' = 1] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2 <= N and i0' > i0 and i2' >= -1 + i2 and -i1 + i0' < i2' <= i2 }

#relations:
[N] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2', i3' = 1] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2' >= -1 + i2 and -i1 + i0' < i2' <= 1 + i2 and ((i2 <= N and i0' > i0 and i2' <= i2) or (i0 > 0 and i2 > i0 - i1 and i0' >= -i0 + i1 + i2 and i2' > i0 + i2 - i0' and i2 <= i2' <= N)); S_1[i0, i1, i2, i3 = 1] -> S_1[i0' = 1 + i1 + i2, i1' = i1, i2', i3' = 1] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and 2 + i2 <= i2' <= 3 + i1 + 2i2 and i2' <= N; S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = 1 + i1 + i0', i2' = 1 + i2, i3' = 1] : i0 > 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 < N and i1 + i2 < i0' <= -2 - i1; S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2', i3' = 0] : i1 < 0 and i2 <= 2i0 - i1 and i2' >= -1 + i2 and -i1 + i0' < i2' <= 1 + i2 and ((i2 <= N and i0' > i0 and i2' <= i2) or (i2 > i0 - i1 and i0' > -i0 + i1 + i2 and i2' > i0 + i2 - i0' and i2 <= i2' <= N)); S_0[i0, i1, i2, i3 = 0] -> S_0[i0' = 1 + i1 + i2, i1', i2' = 1 + i2, i3' = 0] : i0 - i1 < i2 <= 2i0 - i1 and i2 < N and i1 < i1' < 0 and i1' <= 1 + 2i1 + i2; S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = 2 + i2 + i0', i3' = 0] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and 2 + i1 + i2 <= i0' <= -2 + N - i2; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2', i3' = 1] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and i2 <= N and i0' >= i0 and i2' >= i0 + i2 - i0' and i2' >= -1 + i2 and -i1 + i0' < i2' <= 1 + i2 and i2' <= N; S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = 1 + i1 + i0', i2' = 1 + i2, i3' = 1] : i0 - i1 < i2 <= 2i0 - i1 and i2 < N and i1 + i2 < i0' <= -2 - i1; S_0[i0, i1, i2, i3 = 0] -> S_1[i0' = 1 + i1 + i2, i1' = i1, i2', i3' = 1] : i1 < 0 and i0 - i1 < i2 <= 2i0 - i1 and 2 + i2 <= i2' <= 3 + i1 + 2i2 and i2' <= N; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2', i3' = 0] : i1 < 0 and i2 <= 1 + 2i0 - i1 and i2' >= -1 + i2 and -i1 + i0' < i2' <= 1 + i2 and ((i2 <= N and i0' > i0 and i2' <= i2) or (i0 > 0 and i2 > i0 - i1 and 2i0' > i1 + i2 and i2' > i0 + i2 - i0' and i2 <= i2' <= N)); S_1[i0, i1, i2, i3 = 1] -> S_0[i0' = 1 + i1 + i2, i1', i2' = 1 + i2, i3' = 0] : i0 > 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and i2 < N and i1 < i1' < 0 and i1' <= 1 + 2i1 + i2; S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2' = 2 + i2 + i0', i3' = 0] : i0 > 0 and i1 < 0 and i0 - i1 < i2 <= 1 + 2i0 - i1 and 2 + i1 + i2 <= i0' <= -2 + N - i2 }

#delta:
{ [i0, i1, i2 = 1, i3] : i0 >= 2 and -1 <= i3 <= 1 and ((i1 >= 2 + i0 and i3 >= 0) or (i1 > 0 and i3 <= 0)); [i0, i1 = 0, i2, i3] : -1 <= i3 <= 1 and ((i2 >= -1 and -2i0 < i2 <= 1 and i3 <= 0) or (i0 >= 3 and i2 >= 3 + i0 and i3 <= 0) or (i0 >= 2 and i2 >= 2 and i3 >= 0) or (-1 <= i2 <= 1 and i3 >= 0 and i3 > -2i0 - i2)) }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 3, i1 = 6, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 3, i1 = 6, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 5, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 3, i1 = 5, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 5, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = 5, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 4, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = 4, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 2, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 2, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 3, i1 = 1, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 1, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 2, i1 = 2, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 2, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 2, i1 = 1, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 1, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 4, i1 = 0, i2 = 8, i3 = 0] }

#distance vector set : { [i0 = 4, i1 = 0, i2 = 8, i3 = -1] }

#distance vector set : { [i0 = 4, i1 = 0, i2 = 7, i3 = 0] }

#distance vector set : { [i0 = 4, i1 = 0, i2 = 7, i3 = -1] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 7, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 7, i3 = -1] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 6, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 6, i3 = -1] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 3, i3 = 1] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 3, i3 = 0] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 2, i3 = 1] }

#distance vector set : { [i0 = 3, i1 = 0, i2 = 2, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 3, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 3, i3 = 0] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 2, i3 = 1] }

#distance vector set : { [i0 = 2, i1 = 0, i2 = 2, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = -1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1, i3 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = -1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1, i3 = 1] }

#distance vector set : { [i0 = 1, i1 = 0, i2 = -1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1] }

#delta:
{ [i0, i1, i2 = 1, i3] : i0 >= 2 and -1 <= i3 <= 1 and ((i1 >= 2 + i0 and i3 >= 0) or (i1 > 0 and i3 <= 0)); [i0, i1 = 0, i2, i3] : -1 <= i3 <= 1 and ((i0 >= 3 and i2 >= 3 + i0 and i3 <= 0) or (i0 >= 2 and i2 >= 2 and i3 >= 0) or (i2 >= -1 and -2i0 < i2 <= 1 and i3 <= 0) or (-1 <= i2 <= 1 and i3 >= 0 and i3 > -2i0 - i2)) }

#dim [i0]: is parameter, is positive

#dim [i1]: is parameter, is positive

#dim [i2]: is parameter, is positive

#dim [i3]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 = 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 = 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 = 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 = 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 = 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 = 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 = 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 = 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane: { [a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*1 and c2*1 = c1*0 and c2*0 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 >= 0  and a3 >= 0  and ( 1 = 0  or a1 != 0  or a2 != 0  or a3 != 0  )  and 3*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 1*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 1*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 1*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 1*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 3*a1 + 6*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 5*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 4*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + 0*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + 0*a4 >= 0 and 4*a1 + 0*a2 + 8*a3 + -1*a4 >= 0 and 4*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 7*a3 + -1*a4 >= 0 and 3*a1 + 0*a2 + 6*a3 + -1*a4 >= 0 and 3*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 2*a2 + 1*a3 + -1*a4 >= 0 and 3*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 2*a1 + 1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 2, c0 = -4, a1 = 1, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane: { [a1 = 1, a2 = 0, a3 = 1, a4 = 0] }

#hyperplane check: { : exists c1, c2, c3 : ( c1!=0 or c2!=0 or c3!=0 ) and c3*1 = c1*1 + c2*0 and c3*0 = c1*0 + c2*1 and c3*1 = c1*0 + c2*0 and c3*0 = c1*0 + c2*0 } = {}

#result: true

#create hyperplanes stop

#create spaces start

#part: [N] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh0 : 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#part: [N] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh1 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 32 * h1 <= bh1 <= 32 * (h1 + 1) - 1 } 

#part: [N] -> { [i0, i1, i2, i3] -> [  h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : exists bh2 : 1 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh2 = 0 and 40 * h2 <= bh2 <= 40 * (h2 + 1) - 1 } 

#spaces mapper: [N] -> { [i0, i1, i2, i3] -> [h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -31 + i1 <= 32h1 <= i1 and -39 + i0 + i2 <= 40h2 <= i0 + i2 }

#create spaces stop

#create tile scop start

#tile scop mapper: [N] -> { S_0[i0, i1, i2, i3] -> S_0[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -31 + i1 <= 32h1 <= i1 and -39 + i0 + i2 <= 40h2 <= i0 + i2; S_1[i0, i1, i2, i3] -> S_1[h0, h1, h2, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3] : -15 + i0 <= 16h0 <= i0 and -31 + i1 <= 32h1 <= i1 and -39 + i0 + i2 <= 40h2 <= i0 + i2 }

#tile scop delta: { [h0, h1, h2, ii0, ii1, ii2 = 1, ii3] : ii0 >= -15 + 16h0 and ii0 >= -40 + 40h2 and 2 <= ii0 <= 38 + 40h2 and ii0 <= 15 + 16h0 and -31 + 32h1 <= ii1 <= 31 + 32h1 and -1 <= ii3 <= 1 and ((ii1 >= -68 + 32h1 + 40h2 - 2ii0 and ii1 >= 2 + ii0 and 0 <= ii3 <= 69 - 32h1 - 40h2 + 2ii1) or (ii1 >= -93 + 32h0 + 32h1 - 40h2 - ii0 and 0 < ii1 <= 95 + 32h0 + 32h1 - 40h2 - ii0 and ii3 <= 0)); [h0, h1 = 0, h2, ii0, ii1 = 0, ii2, ii3] : -15 + 16h0 <= ii0 <= 15 + 16h0 and -39 + 40h2 - ii0 <= ii2 <= 39 + 40h2 - ii0 and ii3 <= 1 and ((ii2 >= -1 and ii2 > -2ii0 and ii3 >= -1 + ii2 and -1 <= ii3 <= 0) or (ii0 >= 3 and ii2 >= 3 + ii0 and -1 <= ii3 <= 0) or (ii0 >= 2 and ii2 >= 2 and ii3 >= 0) or (-1 <= ii2 <= 1 and ii3 >= -2 + ii2 and ii3 >= -1 - ii2 and ii3 > -3ii0 - 2ii2)) }

#tile scop delta part: { [h0, h1 = 0, h2, ii0, ii1 = 0, ii2, ii3] : -15 + 16h0 <= ii0 <= 15 + 16h0 and ii2 >= -39 + 40h2 - ii0 and ii2 >= -1 and -2ii0 < ii2 <= 39 + 40h2 - ii0 and ii3 >= -1 + ii2 and -1 <= ii3 <= 0 }

#tile scop delta part: { [h0, h1 = 0, h2, ii0, ii1 = 0, ii2, ii3] : -15 + 16h0 <= ii0 <= 15 + 16h0 and ii2 >= -39 + 40h2 - ii0 and -1 <= ii2 <= 1 and ii2 <= 39 + 40h2 - ii0 and ii3 >= -2 + ii2 and ii3 >= -1 - ii2 and -3ii0 - 2ii2 < ii3 <= 1 }

#tile scop delta part: { [h0, h1, h2, ii0, ii1, ii2 = 1, ii3] : ii0 >= -15 + 16h0 and ii0 >= -40 + 40h2 and 2 <= ii0 <= 38 + 40h2 and ii0 <= 15 + 16h0 and ii1 >= -68 + 32h1 + 40h2 - 2ii0 and ii1 >= -31 + 32h1 and 2 + ii0 <= ii1 <= 31 + 32h1 and 0 <= ii3 <= 69 - 32h1 - 40h2 + 2ii1 and ii3 <= 1 }

#tile scop delta part: { [h0, h1 = 0, h2, ii0, ii1 = 0, ii2, ii3] : ii0 >= -15 + 16h0 and 3 <= ii0 <= 15 + 16h0 and ii2 >= -39 + 40h2 - ii0 and 3 + ii0 <= ii2 <= 39 + 40h2 - ii0 and -1 <= ii3 <= 0 }

#tile scop delta part: { [h0, h1 = 0, h2, ii0, ii1 = 0, ii2, ii3] : ii0 >= -15 + 16h0 and 2 <= ii0 <= 15 + 16h0 and ii2 >= -39 + 40h2 - ii0 and 2 <= ii2 <= 39 + 40h2 - ii0 and 0 <= ii3 <= 1 }

#tile scop delta part: { [h0, h1, h2, ii0, ii1, ii2 = 1, ii3] : ii0 >= -15 + 16h0 and ii0 >= -40 + 40h2 and 2 <= ii0 <= 38 + 40h2 and ii0 <= 15 + 16h0 and ii1 >= -93 + 32h0 + 32h1 - 40h2 - ii0 and ii1 >= -31 + 32h1 and 0 < ii1 <= 31 + 32h1 and ii1 <= 95 + 32h0 + 32h1 - 40h2 - ii0 and -1 <= ii3 <= 0 }

#tile delta: { [h0, h1, h2] : h0 >= 0 and h1 >= 0 and h2 > 0 and -6 + 2h0 <= 5h2 <= 6 + 2h0; [h0, h1, h2 = 0] : 0 <= h0 <= 3 and h1 > 0; [h0, h1 = 0, h2] : h0 >= 0 and h2 > 0 and 5h2 >= -6 + 2h0; [h0, h1 = 0, h2 = 0] : 0 < h0 <= 3 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 1, h1 = 1, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 3, h1 = 2, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 3, h1 = 1, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 2, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 1, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 3, h1 = 0, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 2] }

#tile relatiions distance vector set: { [h0 = 0, h1 = 0, h2 = 1] }

#tile relatiions distance vector set: { [h0 = 3, h1 = 0, h2 = 0] }

#tile relatiions distance vector set: { [h0 = 1, h1 = 0, h2 = 0] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 1*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 1*a1 + 1*a2 + 1*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 1*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 3*a1 + 2*a2 + 0*a3 > 0 and 0*a1 + 2*a2 + 0*a3 > 0 and 3*a1 + 1*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 and 3*a1 + 0*a2 + 0*a3 > 0 and 1*a1 + 0*a2 + 0*a3 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : exists c1, c2, c3 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and c0 = c1 + c2 + c3 and a1 != 0 and a2 != 0 and a3 != 0} * {[d0, b0, c0, a1, a2, a3] : exists b1, b2, b3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and 1*a1 + 0*a2 + 2*a3 > 0 and 0*a1 + 0*a2 + 2*a3 > 0 and 1*a1 + 1*a2 + 1*a3 > 0 and 0*a1 + 1*a2 + 1*a3 > 0 and 1*a1 + 0*a2 + 1*a3 > 0 and 0*a1 + 0*a2 + 1*a3 > 0 and 3*a1 + 2*a2 + 0*a3 > 0 and 0*a1 + 2*a2 + 0*a3 > 0 and 3*a1 + 1*a2 + 0*a3 > 0 and 0*a1 + 1*a2 + 0*a3 > 0 and 3*a1 + 0*a2 + 0*a3 > 0 and 1*a1 + 0*a2 + 0*a3 > 0 } )

#result: { [d0 = 0, b0 = 3, c0 = -3, a1 = 1, a2 = 1, a3 = 1] }

#wafefront hyperplane: { [a1 = 1, a2 = 1, a3 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [N] -> { S_1[i0, i1, i2, i3] -> [0, w0, h0, h1, h2, 0, tw0, i0, i1, i2, i3] : exists  bw0, bh0, th0, bh1, th1, bh2, th2 : 1 = 1  and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 1 * th0 <= bh0 <= 1 * (th0 + 1) - 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 32 * h1 <= bh1 <= 32 * (h1 + 1) - 1 and 1 * th1 <= bh1 <= 1 * (th1 + 1) - 1 and 1 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh2 = 0 and 40 * h2 <= bh2 <= 40 * (h2 + 1) - 1 and 1 * th2 <= bh2 <= 1 * (th2 + 1) - 1 and bw0 = 1 * th0 + 1 * th1 + 1 * th2 and w0 = 1 * h0 + 1 * h1 + 1 * h2 and tw0 = 0 } 

#part: [N] -> { S_0[i0, i1, i2, i3] -> [0, w0, h0, h1, h2, 0, tw0, i0, i1, i2, i3] : exists  bw0, bh0, th0, bh1, th1, bh2, th2 : 1 = 1  and 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 and 1 * th0 <= bh0 <= 1 * (th0 + 1) - 1 and 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 - bh1 = 0 and 32 * h1 <= bh1 <= 32 * (h1 + 1) - 1 and 1 * th1 <= bh1 <= 1 * (th1 + 1) - 1 and 1 * i0 + 0 * i1 + 1 * i2 + 0 * i3 - bh2 = 0 and 40 * h2 <= bh2 <= 40 * (h2 + 1) - 1 and 1 * th2 <= bh2 <= 1 * (th2 + 1) - 1 and bw0 = 1 * th0 + 1 * th1 + 1 * th2 and w0 = 1 * h0 + 1 * h1 + 1 * h2 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_0[i0, i1, i2, i3] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, i0, i1, i2, i3] : -15 + i0 <= 16h0 <= i0 and -31 + i1 <= 32h1 <= i1 and -i0 - i2 + 40w0 - 40h0 <= 40h1 <= 39 - i0 - i2 + 40w0 - 40h0; S_1[i0, i1, i2, i3] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, i0, i1, i2, i3] : -15 + i0 <= 16h0 <= i0 and -31 + i1 <= 32h1 <= i1 and -i0 - i2 + 40w0 - 40h0 <= 40h1 <= 39 - i0 - i2 + 40w0 - 40h0 }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_0[c0, c1, c2] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, c0, c1, c2, 0] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N and -15 + c0 <= 16h0 <= c0 and -31 + c1 <= 32h1 <= c1 and -c0 - c2 + 40w0 - 40h0 <= 40h1 <= 39 - c0 - c2 + 40w0 - 40h0; S_1[c0, c1, c2] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, c0, c1, c2, 1] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N and -15 + c0 <= 16h0 <= c0 and -31 + c1 <= 32h1 <= c1 and -c0 - c2 + 40w0 - 40h0 <= 40h1 <= 39 - c0 - c2 + 40w0 - 40h0 }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[N] -> { S_0[c0, c1, c2] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, c0, c1, c2, 0] : c1 < 0 and c0 - c1 < c2 <= 2c0 - c1 and c2 <= N and -15 + c0 <= 16h0 <= c0 and -31 + c1 <= 32h1 <= c1 and -c0 - c2 + 40w0 - 40h0 <= 40h1 <= 39 - c0 - c2 + 40w0 - 40h0; S_1[c0, c1, c2] -> [0, w0, h0, h1, h2 = w0 - h0 - h1, 0, tw0 = 0, c0, c1, c2, 1] : c0 > 0 and c1 < 0 and c0 - c1 < c2 <= 1 + 2c0 - c1 and c2 <= N and -15 + c0 <= 16h0 <= c0 and -31 + c1 <= 32h1 <= c1 and -c0 - c2 + 40w0 - 40h0 <= 40h1 <= 39 - c0 - c2 + 40w0 - 40h0 }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
